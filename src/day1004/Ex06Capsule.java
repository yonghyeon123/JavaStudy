package day1004;
// 접근제한자와 캡슐화
// 접근제한자(Access Modifier)
// 접근 제한자란, 해당 필드 혹은 메소드가
// 외부 클래스의 위치에 따라서
// 접근을 허용할지 말지를 지정하는 키워드들이다.
// 1. public: 퍼블릭 접근제한자는 다른 패키지의 다른 클래스도 접근 가능하다.
// 2. default: 디폴트 접근제한자는 같은 패키지의 다른 클래스들만 접근 가능하다.
//    그렇기 때문에 패키지 접근제한자 라고도 부른다.
//    단, default나 package나 모두 다른 의미를 가진 키워드 이기 때문에,
//    아무런 접근제한자를 적지 않을 경우, 자동으로 디폴트 접근제한자가 적용된다.
// 3. protected: 프로텍티드 접근제한자는 같은 패키지에 있는 외부 클래스이거나
//    다른 패키지더라도 해당 클래스를 상속받는 클래스이면 접근할 수 있다.
// 4. private: private 접근제한자는 모든 외부 클래스는 해당 메소드 혹은 필드에
//    접근을 할수 없다.

import datatype.Student;

// 캡슐화(Capsulization)
// 캡슐화란, 클래스 안의 필드와 외부가 사용하지 않는 모든 메소드를 private 접근제한자를 적용시켜
// 더이상 외부에서 필드나 알 필요가 없는 메소드에 직접적인 접근을 못하게 막는 방법이다.
// 하지만 필드를 private 설정을 하게 되면?
// 다른 클래스에서 더이상 객체.필드 의 형식으로 값을 저장하거나 저장된 값을 호출할 수 없게 된다.
// 그렇다면 우리가 어떻게 해야 해당 필드에 접근할수 있을까?

// getter/setter
// 겟터/셋터란, private 접근제한자가 적용되어있는 필드에
// 값을 저장하거나 호출할 때 사용되는 메소드들이다.
// setter: private 필드에 값을 저장할 때 사용되는 메소드
// 주로 다음과 같은 형식을 가진다.
// public void set필드이름(필드타입 필드이름) {
//      this.필드이름 = 필드이름;
// }
// getter: private 필드에 저장된 값을 호출할때 사용되는 메소드
// 주로 다음과 같은 형식을 가진다.
// public 필드타입 get필드이름() {
//      return 필드이름;
// }
public class Ex06Capsule {
    public static void main(String[] args) {
        Student s = new Student();
        s.setId(3);
        System.out.println("s의 id: " + s.getId());
    }
}
