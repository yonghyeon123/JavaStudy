package day1007;
// 상속(Inheritance)
// 프로그래밍에서의 상속은 부모 클래스의 메소드를 자식 클래스가 다시 쓰지 않더라도
// 그대로 이어받아서 코드의 재사용성을 높이는 것이 목적이 된다.
// 단, 위의 설명은 클래스 간의 상속일 경우에는 맞는 말이지만
// 인터페이스의 상속의 경우에는 목적이 다르다.

// 클래스 상속을 하는 방법은
// public class 클래스이름 extends 상속받을클래스 {
//
// }
// 라고 적어주면 된다.

// 상속관계일 경우,
// 자식 클래스의 객체를 생성할 때
// 먼저 부모 클래스의 생성자를 사용하여 상속받을 메소드들과 필드들의 공간을 만들고
// 그 후에 자식 클래스의 생성자를 사용하여 자식 클래스의 정의된 메소드와 필드를 만들어준다.



public class Ex02Inheritance {
    public static void main(String[] args) {
        Cat c1 = new Cat();
        c1.move();
        c1.eat();
        c1.makeSound();

        // 우리가 객체를 선언하고 초기화할때
        // 기본적으로 해당 클래스의 생성자는 반드시 1번은 호출이 되어야 한다.
        // 즉 해당 클래스의 생성자가 호출되기만 하면 우리가 다른 생성자를 통해서도
        // 해당 클래스 객체를 초기화할 수 있다.

        // 모든 고양이는 동물입니까? Y/N
        // Y

        // 어떤 동물이 있는데, 걔 정체가 고양이야!
        Animal a = new Cat();

        // 모든 동물은 고양이입니까? Y/N
        // N

        // 어떤 고양이가 있는데, 걔 정체가 동물이야!
        // Cat c2 = new Animal();

        // 만약 부모 클래스로부터 상속받은 메소드가
        // 자식 클래스가 그대로 사용하기 힘들다면
        // 오버라이드(=재정의)를 해주면 된다.

        // 그렇다면 우리가 클래스 상속을 할때 주의할점은 무엇인가?
        // 만약 매우 적은 부분만 겹칠 경우, 상속을 할 필요가 있을까?
        // or
        // 재정의 해줄 메소드가 더 많다면?
        // 즉 우리가 상속을 해서 안적어도 될 코드의 양 vs 재정의하거나 새로 만들 코드의 양
        // 을 비교해서 더 이득인 측면을 보는것이 좋다.


    }
}

















